using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

class VePhim
{
    public int ID { get; set; }
    public List<(int hang, int cot)> GheDaDat { get; set; } = new List<(int, int)>();
}

class Program
{
    static int soHang = 7;
    static int soCot = 8;
    static bool[,] ghe = new bool[soHang, soCot];
    static List<VePhim> danhSachVe = new List<VePhim>();
    static string fileGhe = "trangthai_ghe.txt";
    static string fileVe = "danh_sach_ve.txt";
    static int idVeTiepTheo = 1;

    static void Main()
    {
        Console.OutputEncoding = System.Text.Encoding.UTF8; // Hỗ trợ hiển thị tiếng Việt

        DocTrangThai();
        while (true)
        {
            Console.Clear();
            Console.WriteLine("===== QUAN LY VE PHIM =====");
            Console.WriteLine("1. Xem so do ghe");
            Console.WriteLine("2. Tao ve phim moi (dat ghe ngay)");
            Console.WriteLine("3. Xem danh sach ve phim");
            Console.WriteLine("4. Huy ghe trong ve phim");
            Console.WriteLine("5. Luu va Thoat");
            Console.WriteLine("===========================");
            Console.Write("Chon chuc nang (1-5): ");
            string chon = Console.ReadLine();

            switch (chon)
            {
                case "1":
                    Console.Clear();
                    HienThiGhe();
                    Console.WriteLine("\nNhan Enter de quay lai menu...");
                    Console.ReadLine();
                    break;
                case "2":
                    TaoVePhim();
                    break;
                case "3":
                    XemDanhSachVe();
                    break;
                case "4":
                    HuyGhe();
                    break;
                case "5":
                    LuuTrangThai();
                    Console.WriteLine("Da luu. Thoat chuong trinh...");
                    return;
                default:
                    Console.WriteLine("Lua chon khong hop le! Nhan Enter de thu lai...");
                    Console.ReadLine();
                    break;
            }
        }
    }

    static void HienThiGhe()
    {
        Console.WriteLine("So do ghe ([A01]: trong, [ X ]: da dat):\n");
        Console.Write("     ");
        for (int j = 0; j < soCot; j++)
        {
            Console.Write($" {j + 1:D2}  ");
        }
        Console.WriteLine("\n");

        for (int i = 0; i < soHang; i++)
        {
            char tenHang = (char)('A' + i);
            Console.Write($" {tenHang}   ");
            for (int j = 0; j < soCot; j++)
            {
                if (ghe[i, j])
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.Write("[ X ] ");
                }
                else
                {
                    Console.ForegroundColor = ConsoleColor.Gray;
                    Console.Write($"[{tenHang}{j + 1:D2}] ");
                }
            }
            Console.WriteLine("\n");
        }
        Console.ResetColor();
    }

    static void TaoVePhim()
    {
        VePhim ve = new VePhim();
        ve.ID = idVeTiepTheo++;

        Console.Clear();
        HienThiGhe();
        int soLuong;
        while (true)
        {
            Console.Write("\nNhap so luong ghe muon dat: ");
            if (int.TryParse(Console.ReadLine(), out soLuong) && soLuong > 0)
                break;
            Console.WriteLine("So luong khong hop le! Moi nhap lai.");
        }

        int daDat = 0;
        while (daDat < soLuong)
        {
            Console.Write($"Nhap ma ghe thu {daDat + 1} (VD: A1): ");
            string nhap = Console.ReadLine().ToUpper();
            if (KiemTraNhapGhe(nhap, out int hang, out int cot))
            {
                if (!ghe[hang, cot])
                {
                    ghe[hang, cot] = true;
                    ve.GheDaDat.Add((hang, cot));
                    Console.WriteLine($"Da dat ghe {nhap} vao ve {ve.ID}.");
                    daDat++;
                }
                else
                {
                    Console.WriteLine($"Ghe {nhap} da duoc dat. Moi nhap lai.");
                }
            }
            else
            {
                Console.WriteLine("Dinh dang ghe khong hop le. Moi nhap lai.");
            }
        }

        danhSachVe.Add(ve);
        LuuTrangThai();

        Console.WriteLine($"\nDa tao ve phim co ma: {ve.ID} va da duoc luu vao he thong.");
        Console.WriteLine("Nhan Enter de tiep tuc...");
        Console.ReadLine();
    }

    static void XemDanhSachVe()
    {
        Console.Clear();
        if (danhSachVe.Count == 0)
        {
            Console.WriteLine("Chua co ve phim nao!");
        }
        else
        {
            Console.WriteLine("Danh sach ve phim:");
            foreach (var ve in danhSachVe)
            {
                Console.Write($"- Ve {ve.ID}: ");
                if (ve.GheDaDat.Count == 0)
                {
                    Console.WriteLine("Chua dat ghe");
                }
                else
                {
                    foreach (var g in ve.GheDaDat)
                    {
                        char hang = (char)('A' + g.hang);
                        Console.Write($"{hang}{g.cot + 1:D2} ");
                    }
                    Console.WriteLine();
                }
            }
        }
        Console.WriteLine("\nNhan Enter de quay lai menu...");
        Console.ReadLine();
    }

    static void HuyGhe()
    {
        Console.Clear();
        Console.Write("Nhap ma ve phim de huy ghe: ");
        if (int.TryParse(Console.ReadLine(), out int id))
        {
            var ve = danhSachVe.Find(v => v.ID == id);
            if (ve != null && ve.GheDaDat.Count > 0)
            {
                Console.WriteLine($"Danh sach ghe trong ve {id}:");
                foreach (var g in ve.GheDaDat)
                {
                    char hanghuy = (char)('A' + g.hang);
                    Console.Write($"{hanghuy}{g.cot + 1:D2} ");
                }
                Console.Write("\nNhap ma ghe can huy: ");
                string nhap = Console.ReadLine().ToUpper();
                if (KiemTraNhapGhe(nhap, out int hang, out int cot) && ve.GheDaDat.Remove((hang, cot)))
                {
                    ghe[hang, cot] = false;
                    LuuTrangThai();
                    Console.WriteLine($"Da huy ghe {nhap} trong ve {id}.");
                }
                else
                {
                    Console.WriteLine("Ghe khong hop le hoac khong thuoc ve nay.");
                }
            }
            else
            {
                Console.WriteLine("Ve phim khong ton tai hoac khong co ghe nao de huy.");
            }
        }
        Console.WriteLine("\nNhan Enter de tiep tuc...");
        Console.ReadLine();
    }

    static void LuuTrangThai()
    {
        try
        {
            // Lưu trạng thái ghế
            using (StreamWriter sw = new StreamWriter(fileGhe))
            {
                for (int i = 0; i < soHang; i++)
                {
                    for (int j = 0; j < soCot; j++)
                    {
                        sw.Write(ghe[i, j] ? '1' : '0');
                    }
                    sw.WriteLine();
                }
            }

            // Lưu danh sách vé phim
            using (StreamWriter sw = new StreamWriter(fileVe))
            {
                foreach (var ve in danhSachVe)
                {
                    string gheDaDat = string.Join(";", ve.GheDaDat.Select(g => $"{g.hang},{g.cot}"));
                    sw.WriteLine($"{ve.ID}:{gheDaDat}");
                }
            }
        }
        catch (IOException ex)
        {
            Console.WriteLine($"Loi khi luu trang thai: {ex.Message}");
        }
    }

    static void DocTrangThai()
    {
        try
        {
            // Đọc trạng thái ghế từ file
            if (File.Exists(fileGhe))
            {
                string[] lines = File.ReadAllLines(fileGhe);
                for (int i = 0; i < soHang; i++)
                {
                    for (int j = 0; j < soCot; j++)
                    {
                        ghe[i, j] = lines[i][j] == '1';
                    }
                }
            }

            // Đọc danh sách vé phim từ file
            if (File.Exists(fileVe))
            {
                string[] lines = File.ReadAllLines(fileVe);
                danhSachVe.Clear();
                foreach (string line in lines)
                {
                    string[] parts = line.Split(':');
                    if (parts.Length == 2)
                    {
                        VePhim ve = new VePhim { ID = int.Parse(parts[0]) };
                        string[] gheParts = parts[1].Split(';', StringSplitOptions.RemoveEmptyEntries);
                        foreach (string g in gheParts)
                        {
                            string[] pos = g.Split(',');
                            if (pos.Length == 2)
                            {
                                int hang = int.Parse(pos[0]);
                                int cot = int.Parse(pos[1]);
                                ve.GheDaDat.Add((hang, cot));
                            }
                        }
                        danhSachVe.Add(ve);
                    }
                }

                // Cập nhật ID vé tiếp theo
                if (danhSachVe.Count > 0)
                {
                    idVeTiepTheo = danhSachVe[^1].ID + 1;
                }
            }
        }
        catch (IOException ex)
        {
            Console.WriteLine($"Loi khi doc trang thai: {ex.Message}");
        }
    }

    static bool KiemTraNhapGhe(string maGhe, out int hang, out int cot)
    {
        hang = -1;
        cot = -1;

        if (maGhe.Length < 2 || maGhe.Length > 3) return false; // VD: A1, A12 (độ dài hợp lệ)

        char kyTuHang = maGhe[0];  // Lấy ký tự đầu tiên làm hàng
        if (kyTuHang < 'A' || kyTuHang >= 'A' + soHang) return false;

        if (!int.TryParse(maGhe.Substring(1), out cot)) return false;
        if (cot < 1 || cot > soCot) return false;

        // Chuyển hàng về dạng số (A -> 0, B -> 1, ...)
        hang = kyTuHang - 'A';
        cot -= 1; // Chuyển số cột về index mảng (bắt đầu từ 0)

        return true;
    }
}
